{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","visibleGoods","useState","NONE","sortType","setSortType","isReversed","setIsReversed","sort","a","b","LENGTH","length","ALPHABET","localeCompare","reverse","className","type","classnames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,IAAMC,EAAY,UAAOF,GACzB,EAAgCG,mBAASJ,EAASK,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEAN,EAAaO,MAAK,SAACC,EAAGC,GACpB,OAAQN,GACN,KAAKN,EAASa,OACZ,OAAOF,EAAEG,OAASF,EAAEE,OAEtB,KAAKd,EAASe,SACZ,OAAOJ,EAAEK,cAAcJ,GAEzB,QACE,OAAO,MAITJ,GACFL,EAAac,UAoBf,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAC9Bd,IAAaN,EAASe,UAAY,YACpCM,QAxBU,WAChBd,EAAYP,EAASe,WAmBjB,iCASA,wBACEI,KAAK,SACLD,UAAWE,IAAW,SAAU,aAC9Bd,IAAaN,EAASa,QAAU,YAClCQ,QA7BW,WACjBd,EAAYP,EAASa,SAwBjB,4BASA,wBACEM,KAAK,SACLD,UAAWE,IAAW,SAAU,cAC7BZ,GAAc,YACjBa,QAlCU,WAChBZ,GAAeD,IA6BX,sBAUGF,IAAaN,EAASK,MAAQG,IAC7B,wBACEW,KAAK,SACLD,UAAU,4BACVG,QAxCI,WACdd,EAAYP,EAASK,MACrBI,GAAc,IAmCN,sBAWN,6BAEIN,EAAamB,KAAI,SAACC,GAAD,OACf,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC1GpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.06fceebf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classnames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const visibleGoods = [...goodsFromServer];\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  visibleGoods.sort((a, b): SortType => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  const sortAlpha = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverseIt = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const resetIt = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classnames('button', 'is-info',\n            sortType !== SortType.ALPHABET && 'is-light')}\n          onClick={sortAlpha}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames('button', 'is-success',\n            sortType !== SortType.LENGTH && 'is-light')}\n          onClick={sortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames('button', 'is-warning',\n            !isReversed && 'is-light')}\n          onClick={reverseIt}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetIt}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}